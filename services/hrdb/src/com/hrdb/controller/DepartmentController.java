/*Copyright (c) 2016-2017 wavemaker.com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker.com*/

package com.hrdb.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;

import com.hrdb.Department;
import com.hrdb.Employee;
import com.hrdb.service.DepartmentService;
import com.hrdb.service.EmployeeService;


/**
 * Controller object for domain model class Department.
 * @see Department
 */
@RestController("hrdb.DepartmentController")
@Api(value = "/hrdb/Department", description = "Exposes APIs to work with Department resource.")
@RequestMapping("/hrdb/Department")
public class DepartmentController {

    private static final Logger LOGGER = LoggerFactory.getLogger(DepartmentController.class);

    @Autowired
	@Qualifier("hrdb.DepartmentService")
	private DepartmentService departmentService;

    @Autowired
	@Qualifier("hrdb.EmployeeService")
	private EmployeeService employeeService;

	@RequestMapping(method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new Department instance.")
	public Department createDepartment(@RequestBody Department department) {
		LOGGER.debug("Create Department with information: {}" , department);

		department = departmentService.create(department);
		LOGGER.debug("Created Department with information: {}" , department);

	    return department;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the Department instance associated with the given id.")
    public Department getDepartment(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Department with id: {}" , id);

        Department foundDepartment = departmentService.getById(id);
        LOGGER.debug("Department details with id: {}" , foundDepartment);

        return foundDepartment;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the Department instance associated with the given id.")
    public Department editDepartment(@PathVariable("id") Integer id, @RequestBody Department department) throws EntityNotFoundException {
        LOGGER.debug("Editing Department with id: {}" , department.getDeptid());

        department.setDeptid(id);
        department = departmentService.update(department);
        LOGGER.debug("Department details with id: {}" , department);

        return department;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the Department instance associated with the given id.")
    public boolean deleteDepartment(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Department with id: {}" , id);

        Department deletedDepartment = departmentService.delete(id);

        return deletedDepartment != null;
    }
    /**
     * @deprecated Use {@link #findDepartments(String)} instead.
     */
    @Deprecated
    @RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of Department instances matching the search criteria.")
	public Page<Department> findDepartments( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering Departments list");
		return departmentService.findAll(queryFilters, pageable);
	}

    @RequestMapping(method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Department instances matching the search criteria.")
    public Page<Department> findDepartments(@RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering Departments list");
    	return departmentService.findAll(query, pageable);
    }

    @RequestMapping(value = "/export/{exportType}", method = RequestMethod.GET, produces = "application/octet-stream")
    @ApiOperation(value = "Returns downloadable file for the data.")
    public Downloadable exportDepartments(@PathVariable("exportType") ExportType exportType, @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return departmentService.export(exportType, query, pageable);
    }

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of Department instances.")
	public Long countDepartments(@RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting Departments");
		return departmentService.count(query);
	}

    @RequestMapping(value="/{id:.+}/employees", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the employees instance associated with the given id.")
     public Page<Employee>
        findAssociatedEmployees(Pageable pageable, @PathVariable("id") Integer id) {
        LOGGER.debug("Fetching all associated employees");
        return employeeService.findAssociatedValues(id, "Employee", "deptid", pageable);
   }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service DepartmentService instance
	 */
	protected void setDepartmentService(DepartmentService service) {
		this.departmentService = service;
	}

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service EmployeeService instance
	 */
	protected void setEmployeeService(EmployeeService service) {
        this.employeeService = service;
    }
}

